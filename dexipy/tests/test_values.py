import unittest

from dexipy.values import DexiValues, DexiValueType
from dexipy.values import dexi_value_type, check_dexi_value, check_dexi_scale_value
from dexipy.values import dexi_value_as_set, dexi_value_as_distr, reduce_dexi_value, reduce_set

class test_test_values(unittest.TestCase):

    def test_dexi_value_type(self):
        self.assertEqual(dexi_value_type(None), DexiValueType.none)
        self.assertEqual(dexi_value_type(5), DexiValueType.int)
        self.assertEqual(dexi_value_type(5.5), DexiValueType.float)
        self.assertEqual(dexi_value_type(set()), DexiValueType.set)
        self.assertEqual(dexi_value_type({1,2}), DexiValueType.set)
        self.assertEqual(dexi_value_type([1,2]), DexiValueType.list)
        self.assertEqual(dexi_value_type([]), DexiValueType.list)
        self.assertEqual(dexi_value_type({1: 2}), DexiValueType.dict)
        self.assertEqual(dexi_value_type(lambda x: x), None)

    def test_check_dexi_value(self):
        self.assertTrue(check_dexi_value(None))
        self.assertTrue(check_dexi_value(5))
        self.assertTrue(check_dexi_value(5.5))
        self.assertTrue(check_dexi_value(set()))
        self.assertTrue(check_dexi_value({1,2}))
        self.assertTrue(check_dexi_value([1,2]))
        self.assertTrue(check_dexi_value([]))
        self.assertTrue(check_dexi_value({1: 2}))
        self.assertFalse(check_dexi_value(lambda x: x))
        self.assertTrue(check_dexi_value("*"))
        self.assertTrue(check_dexi_value(""))
        self.assertTrue(check_dexi_value("Undefined"))
        self.assertFalse(check_dexi_value("defined"))
        self.assertFalse(check_dexi_value({1,"a"}))
        self.assertFalse(check_dexi_value((1,"a")))
        self.assertFalse(check_dexi_value([1,"a"]))
        self.assertFalse(check_dexi_value({"a": 2}))
        self.assertFalse(check_dexi_value({1: "x"}))
        self.assertFalse(check_dexi_value({1.1: 2}))

    def test_check_dexi_scale_value(self):
        self.assertTrue(check_dexi_scale_value(None))
        self.assertTrue(check_dexi_scale_value(5))
        self.assertTrue(check_dexi_scale_value(5.5))
        self.assertTrue(check_dexi_scale_value(set()))
        self.assertTrue(check_dexi_scale_value({1,2}))
        self.assertTrue(check_dexi_scale_value([1,2]))
        self.assertTrue(check_dexi_scale_value([]))
        self.assertTrue(check_dexi_scale_value({1: 2}))
        self.assertFalse(check_dexi_scale_value(lambda x: x))
        self.assertTrue(check_dexi_scale_value("*"))
        self.assertTrue(check_dexi_scale_value(""))
        self.assertTrue(check_dexi_scale_value("Undefined"))
        self.assertTrue(check_dexi_scale_value("defined"))
        self.assertTrue(check_dexi_scale_value({1,"a"}))
        self.assertTrue(check_dexi_scale_value((1,"a")))
        self.assertFalse(check_dexi_scale_value([1,"a"]))
        self.assertTrue(check_dexi_scale_value({"a": 2}))
        self.assertFalse(check_dexi_scale_value({1: "x"}))
        self.assertFalse(check_dexi_scale_value({1.1: 2}))

    def test_dexi_value_as_set(self):
        self.assertEqual(dexi_value_as_set(None), None)
        self.assertEqual(dexi_value_as_set("*"), None)
        self.assertEqual(dexi_value_as_set(""), None)
        self.assertEqual(dexi_value_as_set(3), {3})
        self.assertEqual(dexi_value_as_set({2, 3, 3}), {2, 3})
        self.assertEqual(dexi_value_as_set((2, 3, 3)), {2, 3})
        self.assertEqual(dexi_value_as_set((2, "a", 3)), None)
        self.assertEqual(dexi_value_as_set((2, 3.3, 3)), None)
        self.assertEqual(dexi_value_as_set([0.0, 1.0, 1.0, 0.5]), {1, 2, 3})
        self.assertEqual(dexi_value_as_set([0.0, 1.0, 1.0, 0.0], True), {1, 2})
        self.assertEqual(dexi_value_as_set([0.0, 1.0, 1.0, 0.5], True), None)
        self.assertEqual(dexi_value_as_set({1: 1, 2: 1}), {1, 2})
        self.assertEqual(dexi_value_as_set({1: 1, 2: 1, 3: 0.5}, strict = True), None)
        self.assertEqual(dexi_value_as_set({1: 1, 2: 1, 3: 0.5}), {1, 2, 3})

    def test_dexi_value_as_distr(self):
        self.assertEqual(dexi_value_as_distr(None), None)
        self.assertEqual(dexi_value_as_distr("*"), None)
        self.assertEqual(dexi_value_as_distr(""), None)
        self.assertEqual(dexi_value_as_distr(3), [0, 0, 0, 1])
        self.assertEqual(dexi_value_as_distr(-3), [])
        self.assertEqual(dexi_value_as_distr({2, 3, 3}), [0, 0, 1, 1])
        self.assertEqual(dexi_value_as_distr((2, 3, 3)), [0, 0, 1, 1])
        self.assertEqual(dexi_value_as_distr((2, "a", 3)), None)
        self.assertEqual(dexi_value_as_distr((2, 3.3, 3)), None)
        self.assertEqual(dexi_value_as_distr([0.0, 1.0, 1.0, 0.5]), [0.0, 1.0, 1.0, 0.5])
        self.assertEqual(dexi_value_as_distr({1:2, 2:3}), [0, 2, 3])

    def test_dexi_reduce_dexi_value(self):
        self.assertEqual(reduce_dexi_value(None), None)
        self.assertEqual(reduce_dexi_value(1), 1)
        self.assertEqual(reduce_dexi_value("*"), "*")
        self.assertEqual(reduce_dexi_value({2}), 2)
        self.assertEqual(reduce_dexi_value((2,)), 2)
        self.assertEqual(reduce_dexi_value((2,2)), 2)
        self.assertEqual(reduce_dexi_value((2,3)), {2,3})
        self.assertEqual(reduce_dexi_value([0, 1, 0]), 1)
        self.assertEqual(reduce_dexi_value([0, 0.5, 0]), [0, 0.5, 0])
        self.assertEqual(reduce_dexi_value([0, 1, 1, 0]), {1, 2})
        self.assertEqual(reduce_dexi_value({1:1, 2:1}), {1, 2})
        self.assertEqual(reduce_dexi_value({1:0.5, 2:1}), [0, 0.5, 1])

    def test_dexi_reduce_set(self):
        self.assertEqual(reduce_set(None), None)
        self.assertEqual(reduce_set(set()), None)
        self.assertEqual(reduce_set({}), {})
        self.assertEqual(reduce_set({2}), 2)
        self.assertEqual(reduce_set({1, 2}), {1, 2})

    def test_DexiValues(self):
        v = DexiValues(None)
        self.assertEqual(v.value, None)
        self.assertEqual(v.value_type(), DexiValueType.none)
        self.assertTrue(v.check_value())
        self.assertTrue(v.check_scale_value())
        self.assertEqual(v.as_set(), None)
        self.assertEqual(v.as_distr(), None)
        self.assertEqual(v.reduce(), None)

        v = DexiValues(1)
        self.assertEqual(v.value, 1)
        self.assertEqual(v.value_type(), DexiValueType.int)
        self.assertTrue(v.check_value())
        self.assertTrue(v.check_scale_value())
        self.assertEqual(v.as_set(), {1})
        self.assertEqual(v.as_distr(), [0, 1])
        self.assertEqual(v.reduce(), 1)

        v = DexiValues((1,))
        self.assertEqual(v.value, (1,))
        self.assertEqual(v.value_type(), DexiValueType.tuple)
        self.assertTrue(v.check_value())
        self.assertTrue(v.check_scale_value())
        self.assertEqual(v.as_set(), {1})
        self.assertEqual(v.as_distr(), [0, 1])
        self.assertEqual(v.reduce(), 1)
        v.reduce_value()
        self.assertEqual(v.value, 1)
        self.assertEqual(v.value_type(), DexiValueType.int)
        self.assertEqual(v.reduce(), 1)

        v = DexiValues([0, 1])
        self.assertEqual(v.value, [0, 1])
        self.assertEqual(v.value_type(), DexiValueType.list)
        self.assertTrue(v.check_value())
        self.assertTrue(v.check_scale_value())
        self.assertEqual(v.as_set(), {1})
        self.assertEqual(v.as_distr(), [0, 1])
        self.assertEqual(v.reduce(), 1)
        v.reduce_value()
        self.assertEqual(v.value, 1)
        self.assertEqual(v.value_type(), DexiValueType.int)
        self.assertEqual(v.reduce(), 1)

if __name__ == '__main__':
    unittest.main()
